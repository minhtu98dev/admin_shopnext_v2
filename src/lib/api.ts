// src/lib/api.ts

import { Order, Product, User } from "@/types";

// ======================
// === CONFIG BACKEND ===
// ======================

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL;
if (!API_BASE_URL) {
  throw new Error(
    "‚ö†Ô∏è Vui l√≤ng ƒë·ªãnh nghƒ©a bi·∫øn m√¥i tr∆∞·ªùng NEXT_PUBLIC_API_URL trong file .env.local"
  );
}

// =========================
// === PRODUCT FUNCTIONS ===
// =========================

/**
 * L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ backend, h·ªó tr·ª£ ph√¢n trang.
 * @param page S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)
 * @param limit S·ªë s·∫£n ph·∫©m m·ªói trang
 * @returns Object g·ªìm { products, total }
 */
export const getProducts_Server = async ({
  page,
  limit,
}: {
  page: number;
  limit: number;
}): Promise<{ products: Product[]; total: number }> => {
  const response = await fetch(
    `${API_BASE_URL}/products?pageNumber=${page}&limit=${limit}`,
    { cache: 'no-store' }
  );

  if (!response.ok) {
    throw new Error('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m');
  }

  const data = await response.json();

  return {
    products: data.products,
    total: data.total,
  };
};

// H√†m A ‚Äî Cho Dashboard (L·∫§Y T·∫§T C·∫¢)
export const getAllProducts_Server = async (): Promise<Product[]> => {
  const res = await fetch(`${API_BASE_URL}/products`, {
    cache: "no-store",
  });

  if (!res.ok) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m");
  }

  const data = await res.json();
  return data.products || [];
};
/**
 * L·∫•y chi ti·∫øt 1 s·∫£n ph·∫©m theo ID.
 */
export const getProductById_Server = async (
  id: string
): Promise<Product> => {
  const res = await fetch(`${API_BASE_URL}/products/${id}`, {
    cache: "no-store",
  });

  if (!res.ok) {
    if (res.status === 404) {
      throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.");
    }
    throw new Error("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m");
  }

  return res.json();
};

// =======================
// === ORDER FUNCTIONS ===
// =======================

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng.
 * Y√™u c·∫ßu token Admin.
 */
export const getOrders_Server = async (token: string): Promise<Order[]> => {
  if (!token) {
    throw new Error("Token kh√¥ng t·ªìn t·∫°i ‚Äî Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
  }

  const response = await fetch(`${API_BASE_URL}/orders`, {
    headers: { Authorization: `Bearer ${token}` },
    cache: "no-store",
  });

  if (!response.ok) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng");
  }

  return response.json();
};
/**
 * L·∫•y chi ti·∫øt 1 ƒë∆°n h√†ng.
 * Y√™u c·∫ßu token.
 */
export const getOrderById_Server = async (
  id: string,
  token: string
): Promise<Order> => {
  console.log(`üîç ƒêang l·∫•y Order ID: ${id}`);
  console.log(
    `üîë Token: ${token ? `Bearer ${token.slice(0, 10)}...` : "‚ùå Kh√¥ng c√≥"}`
  );

  const res = await fetch(`${API_BASE_URL}/orders/${id}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
    cache: "no-store",
  });

  console.log(`‚úÖ Status Code: ${res.status}`);

  if (!res.ok) {
    if (res.status === 401) {
      throw new Error("‚ùå 401 Unauthorized - Token kh√¥ng h·ª£p l·ªá");
    }
    if (res.status === 404) {
      throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
    }
    throw new Error("‚ùå Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt ƒë∆°n h√†ng");
  }

  return res.json();
};

/**
 * L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa 1 user.
 * Y√™u c·∫ßu token Admin.
 */
export const getOrdersByUserId_Server = async (
  userId: string,
  token: string
): Promise<Order[]> => {
  const res = await fetch(`${API_BASE_URL}/orders/user/${userId}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
    cache: "no-store",
  });

  if (!res.ok) {
    throw new Error("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng");
  }

  const data = await res.json();
  return data.orders || [];
};

// ======================
// === USER FUNCTIONS ===
// ======================

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ user.
 * Y√™u c·∫ßu token Admin.
 */
export const getUsers_Server = async (token: string): Promise<User[]> => {
  const res = await fetch(`${API_BASE_URL}/auth`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
    cache: "no-store",
  });

  if (!res.ok) {
    throw new Error("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng");
  }

  return res.json();
};

/**
 * L·∫•y chi ti·∫øt user theo ID.
 * Y√™u c·∫ßu token Admin.
 */
export const getUserById_Server = async (
  userId: string,
  token: string
): Promise<User> => {
  const res = await fetch(`${API_BASE_URL}/auth/${userId}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
    cache: "no-store",
  });

  if (!res.ok) {
    throw new Error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
  }

  return res.json();
};
